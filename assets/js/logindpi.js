/*<------------------------------------------------->
<!--	responseGOauth()	-->
<!-------------------------------------------------->
* Description:
    This function is executed as a callback for the googleOAuth2 button. It retrieves the username, photo, and email, and uses them as parameters to send to a new window that loads the data update form URL.
* Parameters:
     - credentialResponse: An object generated by the OAuth API containing the user information encoded in a token.
* Dependencies:
     - parseJWT(): Used to decode the token within "credentialResponse"
* Returns/Result:
    Opens a new page with the form, sending the username, email, and photo.
<!------------------------------------------------->*/
function responseGOauth(credentialResponse) {
    try {
        // Decode the 'credential' property of credentialResponse
        const credencialesObject = parseJWT(credentialResponse.credential);

        // Extract user details
        const { name: nombreUsuario, email: emailUsuario } = credencialesObject;
        const userName = emailUsuario.split('@')[0];

        // Elements of the page to modify
        const notLoggedInBanner = document.getElementById('notLogged');
        const buscador = document.getElementById('buscador');

        // If a user exists, toggle between the warning banner and the search bar
        if (credencialesObject && isNaN(Number(userName))) {
            notLoggedInBanner.style.display = 'none';
            buscador.style.display = 'grid';
        } else {
            notLoggedInBanner.style.display = 'block';
            buscador.style.display = 'none';
        }
    } catch (error) {
        console.error('Error processing OAuth response:', error);
    }
}
/*<!------------------------------------------------->
<!--	end responseGOauth()	-->
<!------------------------------------------------->*/

/*<------------------------------------------------->
<!--	parseJWT()	-->
<!-------------------------------------------------->
* Description:
    Function that decodes the token within the 'credentialResponse' object
* Parameters:
    - token: Should point to the object: credentialResponse.credential
* Dependencies: None
* Returns/Result: A decoded JSON object with the user's credentials.
<!------------------------------------------------->*/
function parseJWT(token) {
    const base64Url = token.split('.')[1];
    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
    const jsonPayload = decodeURIComponent(
        atob(base64)
            .split('')
            .map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))
            .join('')
    );

    return JSON.parse(jsonPayload);
}
/*<!------------------------------------------------->
<!--	end parseJWT()	-->
<!------------------------------------------------->*/
