/*<------------------------------------------------->
<!--	responseGOauth()	-->
<!-------------------------------------------------->
* Description:
    This function is executed as a callback for the googleOAuth2 button. It retrieves the username, photo, and email, and uses them as parameters to send to a new window that loads the data update form URL.
* Parameters:
     - credentialResponse: An object generated by the OAuth API containing the user information encoded in a token.
* Dependencies:
     - parseJWT(): Used to decode the token within "credentialResponse"
* Returns/Result:
    Opens a new page with the form, sending the username, email, and photo.
<!------------------------------------------------->*/
function responseGOauth(credentialResponse) {
    try {
        // Decode the JWT token
        const credencialesObject = parseJWT(credentialResponse.credential);

        // Validate the token's audience and expiration
        if (credencialesObject.aud !== '94652977258-lf78996qj8qd6i9fgeg0j6qk1aq2ehp1.apps.googleusercontent.com') {
            throw new Error('Invalid token audience.');
        }

        const currentTime = Math.floor(Date.now() / 1000);
        if (credencialesObject.exp < currentTime) {
            throw new Error('Token has expired.');
        }

        // Extract user information
        const nombreUsuario = credencialesObject.name;
        const emailUsuario = credencialesObject.email;
        const userName = emailUsuario.split('@')[0];
        const userOrg = credencialesObject.hd;

        console.log('User organization:', userOrg);
        console.log('User name:', nombreUsuario);

        // UI updates based on authentication status
        const notLoggedInBanner = document.getElementById('notLogged');
        const buscador = document.getElementById('buscador');

        if (credencialesObject && isNaN(Number(userName))) {
            notLoggedInBanner.style.display = 'none';
            buscador.style.display = 'grid';
        } else {
            notLoggedInBanner.style.display = 'block';
            buscador.style.display = 'none';
        }
    } catch (error) {
        console.error('Error processing OAuth response:', error);
    }
}

/*<!------------------------------------------------->
<!--	end responseGOauth()	-->
<!------------------------------------------------->*/

/*<------------------------------------------------->
<!--	parseJWT()	-->
<!-------------------------------------------------->
* Description:
    Function that decodes the token within the 'credentialResponse' object
* Parameters:
    - token: Should point to the object: credentialResponse.credential
* Dependencies: None
* Returns/Result: A decoded JSON object with the user's credentials.
<!------------------------------------------------->*/
function parseJWT(token) {
    var base64Url = token.split('.')[1];
    var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
    var jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {
        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
    }).join(''));

    return JSON.parse(jsonPayload);
}
/*<!------------------------------------------------->
<!--	end parseJWT()	-->
<!------------------------------------------------->*/
